########################################
# ? API Gateway Basic Configuration
########################################

# Application name - used for Eureka service registration
spring.application.name=api-gateway

# Port on which the API Gateway will run
server.port=8080


########################################
# ? Eureka Service Discovery Config
########################################

# Register this API Gateway instance with Eureka
eureka.client.register-with-eureka=true

# Fetch service registry information from Eureka so the gateway can discover services
eureka.client.fetch-registry=true

# Location of the Eureka Server (service registry)
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/


########################################
# ? Request Routing (Spring Cloud Gateway)
########################################
# Format: spring.cloud.gateway.routes[index].<property>=value
# The `uri` can be:
#   - Direct service URL (e.g., http://localhost:3030)
#   - Load balanced service name via Eureka (e.g., lb://productservice)
#   - The `Path` predicate defines which incoming request paths map to which backend service
########################################


# =======================
# ? Product Service Routing
# =======================

# Route ID - unique identifier for this route
spring.cloud.gateway.routes[0].id=productservice

# Path predicates - If the request path matches any of these patterns,
# forward it to the Product Service.
# Here: "/products/*" or "/prds/*" ? both are routed to productservice
spring.cloud.gateway.routes[0].predicates[0]=Path=/products/*,/prds/*

# Dynamic URI with Eureka + Load Balancer
# Instead of hardcoding "http://localhost:3030", use "lb://productservice"
# This allows:
#   - Automatic load balancing if multiple productservice instances are registered
#   - No need to change config if the service moves to a different port/host
spring.cloud.gateway.routes[0].uri=lb://productservice


# =======================
# ? User Service Routing
# =======================

# Route ID for user service
spring.cloud.gateway.routes[1].id=userservice

# Path predicates - If the request path matches any of these patterns,
# forward it to the User Service.
# Example: "/user/*" or "/usr/*" ? both are routed to userservice
spring.cloud.gateway.routes[1].predicates[0]=Path=/user/*,/usr/*

# Dynamic URI for User Service using Eureka + Load Balancer
spring.cloud.gateway.routes[1].uri=lb://userservice



spring.cloud.gateway.routes[1].filters[0]=RequestRateLimiter
spring.cloud.gateway.routes[1].filters[0].redis-rate-limiter.replenishRate=10
spring.cloud.gateway.routes[1].filters[0].redis-rate-limiter.burstCapacity=20
spring.cloud.gateway.routes[1].filters[0].key-resolver=#{@ipKeyResolver}


# Enable Actuator endpoints
management.endpoints.web.exposure.include=health,metrics,prometheus

# Configure metrics
management.metrics.export.prometheus.enabled=true
management.metrics.distribution.percentiles-histogram.http.server.requests=true


# Redis configuration
spring.cache.type=redis
spring.redis.host=localhost
spring.redis.port=6379

# Cache settings
spring.cache.redis.time-to-live=300000  # 5 minutes
spring.cache.redis.cache-null-values=false


spring.cloud.gateway.routes[0].filters=Cache=productCache
spring.cloud.gateway.routes[1].filters=Cache=userCache

# Cache settings
productCache.ttl=300
userCache.ttl=180

# Ignore these headers in cache key
spring.cloud.gateway.cache.excluded-headers=Authorization, X-Secret

